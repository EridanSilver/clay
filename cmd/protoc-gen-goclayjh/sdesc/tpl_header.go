package sdesc

import (
	"io"
	"text/template"
)

type headerTplData struct {
	SourceFileName string
	GoPkg          string

	StandardImports    []Package
	NonStandardImports []Package
}

func tplHeader(pc *PackageCollection, d headerTplData) func(io.Writer) error {
	tpl := template.Must(template.New("header").Funcs(template.FuncMap{
		"pkg": func(name string) string {
			p := pc.Get(name)
			if p == nil {
				return "pkg not found," + name
			}
			return p.Alias + "."
		},
	}).Parse(`
// Code generated by protoc-gen-goclay. DO NOT EDIT.
// source: {{ .SourceFileName }}

/*
Package {{ .GoPkg }} is a self-registering gRPC and JSON+Swagger service definition.

It conforms to the github.com/utrack/clay/v2/transport Service interface.
*/
package {{ .GoPkg }}
import (
{{ range $i := .StandardImports -}}
    {{ $i | printf "%s\n" -}}
{{- end }}
{{ range $i := .NonStandardImports -}}
    {{ $i | printf "%s\n" -}}
{{- end }}
)

// Update your shared lib or downgrade generator to v1 if there's an error
var _ = {{ pkg "github.com/utrack/clay/v2/transport" }}IsVersion2

var _ {{ pkg "bytes" }}Buffer
var _ {{ pkg "context" }}Context
var _ {{ pkg "encoding/base64" }}Encoding
var _ {{ pkg "fmt" }}Formatter
var _ {{ pkg "io/ioutil" }}Discard
var _ {{ pkg "net/http" }}Handler
var _ {{ pkg "net/url" }}Values
var _ {{ pkg "strings" }}Reader

var _ {{ pkg "github.com/go-chi/chi" }}Router
var _ {{ pkg "github.com/grpc-ecosystem/grpc-gateway/runtime" }}Marshaler
var _ {{ pkg "github.com/grpc-ecosystem/grpc-gateway/utilities" }}DoubleArray
var _ {{ pkg "github.com/pkg/errors" }}Frame
var _ {{ pkg "github.com/utrack/clay/v2/transport/httpruntime" }}Marshaler
var _ {{ pkg "github.com/utrack/clay/v2/transport/httptransport" }}MarshalerError
`))
	return func(w io.Writer) error {
		return tpl.Execute(w, d)
	}
}
