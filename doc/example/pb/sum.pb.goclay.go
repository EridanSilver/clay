// Code generated by protoc-gen-goclay
// source: sum.proto
// DO NOT EDIT!

/*
Package sumpb is a self-registering gRPC and JSON+Swagger service definition.

It conforms to the github.com/utrack/clay Service interface.
*/
package sumpb

import (
	"net/http"

	"github.com/go-chi/chi"
	"github.com/go-openapi/spec"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"github.com/pkg/errors"
	"github.com/utrack/clay/transport"
	"github.com/utrack/clay/transport/httpruntime"
	"github.com/utrack/clay/transport/swagger"
	"google.golang.org/grpc"
)

// Update your shared lib or downgrade generator to v1 if there's an error
var _ = transport.IsVersion2

var _ chi.Router
var _ runtime.Marshaler

// SummatorDesc is a descriptor/registrator for the SummatorServer.
type SummatorDesc struct {
	svc SummatorServer
}

// NewSummatorServiceDesc creates new registrator for the SummatorServer.
func NewSummatorServiceDesc(svc SummatorServer) *SummatorDesc {
	return &SummatorDesc{svc: svc}
}

// RegisterGRPC implements service registrator interface.
func (d *SummatorDesc) RegisterGRPC(s *grpc.Server) {
	RegisterSummatorServer(s, d.svc)
}

// SwaggerDef returns this file's Swagger definition.
func (d *SummatorDesc) SwaggerDef(options ...swagger.Option) (result []byte) {
	if len(options) > 0 {
		var err error
		var swagger = &spec.Swagger{}
		if err = swagger.UnmarshalJSON(_swaggerDef_sum_proto); err != nil {
			panic("Bad swagger definition: " + err.Error())
		}
		for _, o := range options {
			o(swagger)
		}
		if result, err = swagger.MarshalJSON(); err != nil {
			panic("Failed marshal spec.Swagger definition: " + err.Error())
		}
	} else {
		result = _swaggerDef_sum_proto
	}
	return result
}

// RegisterHTTP registers this service's HTTP handlers/bindings.
func (d *SummatorDesc) RegisterHTTP(mux transport.Router) error {
	chiMux, isChi := mux.(chi.Router)
	var h http.HandlerFunc

	// Handler for Sum, binding: GET /v1/example/sum/{a}/{b}
	h = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		defer r.Body.Close()

		var req SumRequest
		err := unmarshaler_goclay_Summator_Sum_0(r, &req)
		if err != nil {
			httpruntime.SetError(r.Context(), r, w, errors.Wrap(err, "couldn't parse request"))
			return
		}

		ret, err := d.svc.Sum(r.Context(), &req)
		if err != nil {
			httpruntime.SetError(r.Context(), r, w, errors.Wrap(err, "returned from handler"))
			return
		}

		_, outbound := httpruntime.MarshalerForRequest(r)
		w.Header().Set("Content-Type", outbound.ContentType())
		err = outbound.Marshal(w, ret)
		if err != nil {
			httpruntime.SetError(r.Context(), r, w, errors.Wrap(err, "couldn't write response"))
			return
		}
	})
	if isChi {
		chiMux.Method("GET", pattern_goclay_Summator_Sum_0, h)
	} else {
		return errors.New("query URI params supported only for chi.Router")
	}

	return nil
}

var _swaggerDef_sum_proto = []byte(`{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "title": "sum.proto",
        "version": "version not set"
    },
    "paths": {
        "/v1/example/sum/{a}/{b}": {
            "get": {
                "tags": [
                    "Summator"
                ],
                "operationId": "Sum",
                "parameters": [
                    {
                        "type": "string",
                        "format": "int64",
                        "name": "a",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "int64",
                        "name": "b",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/sumpbSumResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "sumpbSumRequest": {
            "description": "SumRequest is a request for Summator service.",
            "type": "object",
            "properties": {
                "a": {
                    "description": "A is the number we're adding to. Can't be zero for the sake of example.",
                    "type": "string",
                    "format": "int64"
                },
                "b": {
                    "description": "B is the number we're adding.",
                    "type": "string",
                    "format": "int64"
                }
            }
        },
        "sumpbSumResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "sum": {
                    "type": "string",
                    "format": "int64"
                }
            }
        }
    }
}
`)

var (
	pattern_goclay_Summator_Sum_0     = "/v1/example/sum/{a}/{b}"
	unmarshaler_goclay_Summator_Sum_0 = func(r *http.Request, req *SumRequest) error {
		rctx := chi.RouteContext(r.Context())
		if rctx == nil {
			panic("Only chi router is supported for GETs atm")
		}
		for pos, k := range rctx.URLParams.Keys {
			if err := errors.Wrap(runtime.PopulateFieldFromPath(req, k, rctx.URLParams.Values[pos]), "couldn't populate field from URL"); err != nil {
				return err
			}
		}
		return nil
	}
)
