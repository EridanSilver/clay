// Code generated by protoc-gen-goclay
// source: sum.proto
// DO NOT EDIT!

/*
Package sumpb is a self-registering gRPC and JSON+Swagger service definition.

It conforms to the github.com/utrack/clay Service interface.
*/
package sumpb

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/go-chi/chi"
	"github.com/go-openapi/spec"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"github.com/pkg/errors"
	"github.com/utrack/clay/transport"
	"github.com/utrack/clay/transport/httpruntime"
	"github.com/utrack/clay/transport/swagger"
	"google.golang.org/grpc"
)

// Update your shared lib or downgrade generator to v1 if there's an error
var _ = transport.IsVersion2

var _ chi.Router
var _ runtime.Marshaler

// SummatorDesc is a descriptor/registrator for the SummatorServer.
type SummatorDesc struct {
	svc SummatorServer
}

// NewSummatorServiceDesc creates new registrator for the SummatorServer.
func NewSummatorServiceDesc(svc SummatorServer) *SummatorDesc {
	return &SummatorDesc{svc: svc}
}

// RegisterGRPC implements service registrator interface.
func (d *SummatorDesc) RegisterGRPC(s *grpc.Server) {
	RegisterSummatorServer(s, d.svc)
}

// SwaggerDef returns this file's Swagger definition.
func (d *SummatorDesc) SwaggerDef(options ...swagger.Option) (result []byte) {
	if len(options) > 0 {
		var err error
		var swagger = &spec.Swagger{}
		if err = swagger.UnmarshalJSON(_swaggerDef_sum_proto); err != nil {
			panic("Bad swagger definition: " + err.Error())
		}
		for _, o := range options {
			o(swagger)
		}
		if result, err = swagger.MarshalJSON(); err != nil {
			panic("Failed marshal spec.Swagger definition: " + err.Error())
		}
	} else {
		result = _swaggerDef_sum_proto
	}
	return result
}

// RegisterHTTP registers this service's HTTP handlers/bindings.
func (d *SummatorDesc) RegisterHTTP(mux transport.Router) {
	chiMux, isChi := mux.(chi.Router)
	var h http.HandlerFunc

	// Handler for Sum, binding: POST /v1/example/sum/{a}
	h = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		defer r.Body.Close()

		var req SumRequest
		err := unmarshaler_goclay_Summator_Sum_0(r, &req)
		if err != nil {
			httpruntime.SetError(r.Context(), r, w, errors.Wrap(err, "couldn't parse request"))
			return
		}

		ret, err := d.svc.Sum(r.Context(), &req)
		if err != nil {
			httpruntime.SetError(r.Context(), r, w, errors.Wrap(err, "returned from handler"))
			return
		}

		_, outbound := httpruntime.MarshalerForRequest(r)
		w.Header().Set("Content-Type", outbound.ContentType())
		err = outbound.Marshal(w, ret)
		if err != nil {
			httpruntime.SetError(r.Context(), r, w, errors.Wrap(err, "couldn't write response"))
			return
		}
	})
	if isChi {
		chiMux.Method("POST", pattern_goclay_Summator_Sum_0, h)
	} else {
		panic("query URI params supported only for chi.Router")
	}

}

var _swaggerDef_sum_proto = []byte(`{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "title": "sum.proto",
        "version": "version not set"
    },
    "paths": {
        "/v1/example/sum/{a}": {
            "post": {
                "tags": [
                    "Summator"
                ],
                "operationId": "Sum",
                "parameters": [
                    {
                        "type": "string",
                        "format": "int64",
                        "name": "a",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sumpbBStruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/sumpbSumResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "sumpbBStruct": {
            "type": "object",
            "properties": {
                "b": {
                    "type": "string",
                    "format": "int64"
                }
            }
        },
        "sumpbSumRequest": {
            "description": "SumRequest is a request for Summator service.",
            "type": "object",
            "properties": {
                "a": {
                    "description": "A is the number we're adding to. Can't be zero for the sake of example.",
                    "type": "string",
                    "format": "int64"
                },
                "b": {
                    "description": "B is the number we're adding.",
                    "$ref": "#/definitions/sumpbBStruct"
                }
            }
        },
        "sumpbSumResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "sum": {
                    "type": "string",
                    "format": "int64"
                }
            }
        }
    }
}
`)

type Summator_httpClient struct {
	c    *http.Client
	host string
}

// NewSummatorHTTPClient creates new HTTP client for SummatorServer.
// Pass addr in format "http://host[:port]".
func NewSummatorHTTPClient(c *http.Client, addr string) SummatorClient {
	if strings.HasSuffix(addr, "/") {
		addr = addr[:len(addr)-1]
	}
	return &Summator_httpClient{c: c, host: addr}
}

func (c *Summator_httpClient) Sum(ctx context.Context, in *SumRequest, _ ...grpc.CallOption) (*SumResponse, error) {

	path := pattern_goclay_Summator_Sum_0_builder(in.A)

	buf := bytes.NewBuffer(nil)

	m := httpruntime.DefaultMarshaler(nil)
	err := m.Marshal(buf, in)
	if err != nil {
		return nil, errors.Wrap(err, "can't marshal request")
	}

	req, err := http.NewRequest("POST", c.host+path, buf)
	if err != nil {
		return nil, errors.Wrap(err, "can't initiate HTTP request")
	}

	req.Header.Add("Accept", m.ContentType())

	rsp, err := c.c.Do(req)
	if err != nil {
		return nil, errors.Wrap(err, "error from client")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode >= 400 {
		b, _ := ioutil.ReadAll(rsp.Body)
		return nil, errors.Errorf("%v %v: server returned HTTP %v: '%v'", req.Method, req.URL.String(), rsp.StatusCode, string(b))
	}

	ret := &SumResponse{}
	err = m.Unmarshal(rsp.Body, ret)
	return ret, errors.Wrap(err, "can't unmarshal response")
}

var (
	pattern_goclay_Summator_Sum_0 = "/v1/example/sum/{a}"

	pattern_goclay_Summator_Sum_0_builder = func(
		a int64,
	) string {
		return fmt.Sprintf("/v1/example/sum/%v", a)
	}

	unmarshaler_goclay_Summator_Sum_0_boundParams = map[string]struct{}{
		"b": struct{}{},
		"a": struct{}{},
	}
	unmarshaler_goclay_Summator_Sum_0 = func(r *http.Request, req *SumRequest) error {

		for k, v := range r.URL.Query() {
			if _, ok := unmarshaler_goclay_Summator_Sum_0_boundParams[strings.ToLower(k)]; ok {
				continue
			}
			runtime.PopulateFieldFromPath(req, k, v[0])
		}

		var err error
		inbound, _ := httpruntime.MarshalerForRequest(r)
		err = errors.Wrap(inbound.Unmarshal(r.Body, req.B), "couldn't read request JSON")
		if err != nil {
			return err
		}

		rctx := chi.RouteContext(r.Context())
		if rctx == nil {
			panic("Only chi router is supported for GETs atm")
		}
		for pos, k := range rctx.URLParams.Keys {
			runtime.PopulateFieldFromPath(req, k, rctx.URLParams.Values[pos])
		}

		return err
	}
)
